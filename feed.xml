<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2025-04-12T22:26:15+00:00</updated><id>/feed.xml</id><title type="html">Yashaswi Makula</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>Yashaswi Makula</name><email>yashaswi2000@gmail.com</email></author><entry><title type="html">Interesting points I found</title><link href="/jekyll/update/2024/09/09/Interesting-points-I-found.html" rel="alternate" type="text/html" title="Interesting points I found" /><published>2024-09-09T23:50:50+00:00</published><updated>2024-09-09T23:50:50+00:00</updated><id>/jekyll/update/2024/09/09/Interesting-points-I-found</id><content type="html" xml:base="/jekyll/update/2024/09/09/Interesting-points-I-found.html"><![CDATA[<p>“Even language modeling can be viewed as classification: each
word can be thought of as a class, and so predicting the next word is classifying the
context-so-far into a class for each next word.” - Speech and Language Processing. Daniel Jurafsky &amp; James H. Martin. Copyright © 2024. All
rights reserved. Draft of August 20, 2024.</p>

<p>”. Generative classifiers like naive
Bayes build a model of how a class could generate some input data. Given an observation, they return the class most likely to have generated the observation. Discriminative classifiers like logistic regression instead learn what features from the
input are most useful to discriminate between the different possible classes.” - Speech and Language Processing. Daniel Jurafsky &amp; James H. Martin. Copyright © 2024. All
rights reserved. Draft of August 20, 2024.</p>]]></content><author><name>Yashaswi Makula</name><email>yashaswi2000@gmail.com</email></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[“Even language modeling can be viewed as classification: each word can be thought of as a class, and so predicting the next word is classifying the context-so-far into a class for each next word.” - Speech and Language Processing. Daniel Jurafsky &amp; James H. Martin. Copyright © 2024. All rights reserved. Draft of August 20, 2024.]]></summary></entry><entry><title type="html">Docker Learnings</title><link href="/jekyll/update/2024/09/04/Docker-Learnings.html" rel="alternate" type="text/html" title="Docker Learnings" /><published>2024-09-04T19:50:50+00:00</published><updated>2024-09-04T19:50:50+00:00</updated><id>/jekyll/update/2024/09/04/Docker-Learnings</id><content type="html" xml:base="/jekyll/update/2024/09/04/Docker-Learnings.html"><![CDATA[<p>Utilising the build cache to the most. build order is important. and any change in step n triggers rebuilding of all the n++ steps. so ordering build steps from least changing onces to most changing onces is optimal.</p>

<p>updating package indexes and installing packages should be done together to make use of package manager cache and thus will be cached together. and clean up the package manager cache after install</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm</span> <span class="nt">-rf</span> /var/lib/apt/lists/<span class="k">*</span>
</code></pre></div></div>

<p>consider building your binaries as part of docker build rather than copying from source. your source code should be the source of truth not for binaries.</p>]]></content><author><name>Yashaswi Makula</name><email>yashaswi2000@gmail.com</email></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Utilising the build cache to the most. build order is important. and any change in step n triggers rebuilding of all the n++ steps. so ordering build steps from least changing onces to most changing onces is optimal.]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="/jekyll/update/2024/08/09/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2024-08-09T20:59:50+00:00</published><updated>2024-08-09T20:59:50+00:00</updated><id>/jekyll/update/2024/08/09/welcome-to-jekyll</id><content type="html" xml:base="/jekyll/update/2024/08/09/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>Yashaswi Makula</name><email>yashaswi2000@gmail.com</email></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>